Promise: The promise that an particular action takes place.

BodyParser : to get the data from the req.body and parse them to use it further

Mongoosechemas: created mongoose schema for users and profile using new Schema({this portion has the key and type for every field u need in mongodb document})

JWT: json web token, token thet user passes during logging in to ensure the secured access to the database.
  need: payload
        secretkey
        signing option
  jwt.sign(): The key , payload and expiry duration sent with in the jwt.sign as options. This will create a token for the user and store a local copy of the token till time expiration 
  jwt.verify(): 

Passport: the passport validates the jwt and gets the user information for the session. so that only when logged in the user can access the protected routes.
  jwt_strategy: use the jwt strategy for passport to validate the user based on the bearer token.
  fromAuthHeaderAsBearerToken(): will make the header to get the bearer token as jwt token.
  authenticate(): in the endpoint creation, this will ensure the protected route using jwt strategy. 

Bcryptjs: 
  becrypt.gensalt(): used to hash the password using the salt. also can compare the hash with the password given by the user.

validator: validates the input based on validator library
  validateRegisterInput(), validateLoginrInput(): will take the data from the body of the registration page and login page respectively as paramenter and check for errors. returns the error as string.
  there are predefined functions like isEmail, isEmpty and length in the validation library. Using these to validate the user inputs.

Creating express API for 
  GET: user, profile details using protected route
  POST: user registration, user login, profile update, experience update, education update, update like
    update like: logic: when user hits the post(/likes/:id), the user id will be put into the likes array of the post. We can know who all liked the post. In futue if someone likes the post we will check if the user id has already in the likes array, if so then the like foe the user will not work again.
  DELETE: user, profile, experience, education (using id in the url as parameter).
    To delete post or a comment, first find using the id and then splice the array then save the rest of the array and then display the json document




********************REACT*********************************************************************************
In the package.json, add proxy to make the react to point the same port as that of nodejs
Use concurrently, to use multiple commands execute at once. just run npm run server inside the node then it will run both react and node.

AXIOS : used to communicate the frontend with the backend
created the register and login forms in react added the constructor to take the values in form and change the state using a function
  onChange(): this will uset setState({[e.target.name]:e.target.value}). 
  onSubmit(): will have actuons of the form 

redux: state manager. cannot mutate the state but copy it and then modify it.
Send todos to components using redux. Share the state data amnong components using redux.
When ajax request is made the redux will call the action.

connect: used to connect redux to a component so import the connect in the component
reducer will dispatch the data when ever the action is needed and get the states in the component.

To get any auth state into the component use mapStateToProps(state) takes state as parameter and put state to prpperty so that itcan be used anywhere in the component.

In react, any property in a component must be mapped to proptypes.

when user logged in if the user hit login in url the dashboard should be displayed. For this, in ligin.js and register.js check if user user logged in using isAuthenticated is true or not in the componentDidMount() function and then this.props.history.push('/dashboard)

The input form group in logina nd regsiter  has been moved to component as textFieldGroup component. Make variables there in the component, assign proptypes for them and create form elements inside return(). Call the textFieldGroup component from the login and register user and pass the values that the form elements should have.

PrivateRoute: the dashboard has to be accessible only when logged in so create PrivateRoute component, get the auth props in the PrivateRoute component and create route based on condition (isAuthenticated===true?retain dashboard component: login component). also add private route in app.js with a <Switch></Switch> to avaoid unwanted routing.

Creating new page eg. /edit-profile: Create component EditProfile, add the input field gropus and to create form structure(whatever u need in the page) and the onclick, onsubmit events, lifecycle method, add the route in app.js using <switch> and <privateroute>, add the actions in the profileActions that is call the backend api for that webpage and integrate with the backend.

To make state in the component to pop up in redux: 
  create component, add elements using input groups, in the lifecycle method call the function to execute function. Write the function in the profileAction.js. while writing the function , add the types for promise and catch. 
  Also include the type in the types.js. 
  Add reducer in the profileReducer.js to indicate what are the changes to be made in the state.

  rel="noopener noreferrer": research on this

PostFeed:
  To get post from user:
    Create component Post and call the PostForm component(has the html elements in it)
    In the PostForm create the react/html elements using the    TextAreafieldGroup component(or any other component as required) to build the UI.
      create the onSubmit and onChange event listeners. 
      do the redux connect, map the state to properties, also define the prop types.
    Add the component in the App.js for the routing using private route.
    create reducer for post. 
      initialize the states in reducer with const to initial values which can be empty array or boolean value.
      create function to set the action.type based on initialState, use switch statements to switch through action.type
      create the types, in types.js for the redux to show
        GET_POST, POST_LOADING .
      update the root reducer with the post reducer.
      create the postActions.js, wher u write the action function basically wat the action does.
        import axios and the required types.
        write function definition that will take postData passed to the function as argument and dispatch the action.
        inside the function use axios and call the backend api that we created using the node.js and pass the postData. In the promise, u will get result and then u have to dispatch the action saying it to change the type of the action and payload(response that the api will return to this function as a promise).In the catch, change the type to GET_ERRORS and payload(error response returned by the api).
  
  Display post to user:
    create action in postActions.js. include the method getPost(), which will dispatch the setPostLoading() to change the state of the loading variable in  the redux. Then call the backend api for getting the posts using axios. In the promise, dispatch to change the status of the GET_POSTS in the redux as well as the payload. In the catch, dispatch the to change the status of the GET_POSTS and set payload to null(this is because no post to return from the api)
    in the postReducer.js add the switch cases for the GET_POSTS (set the state and manke loading to false), POST_LOADING(change the state of the loading to true).
    
      
Like a post:
  The like font awesome icon is gray by default, id user click then it turns green so that says user already liked so he cannot like again. If the post is not liked by loggedin user then the icon is green. For this ww write function finduserlike() and we take the likes array into that function as parameter and check if the user id is in the array, is so then turn the icon green using classnames or else keep it gray.    

Making keys for production:
  make two files keys_prod.js and keys-dev.js.
  In ur keys_dev.js paste ur mongo and keys data.
  In ur keys_prod put process.env.MONGOURI and process.env.SECRET_OR_KEY

