Promise: The promise that an particular action takes place.

BodyParser : to get the data from the req.body and parse them to use it further

Mongoosechemas: created mongoose schema for users and profile using new Schema({this portion has the key and type for every field u need in mongodb document})

JWT: json web token, token thet user passes during logging in to ensure the secured access to the database.
  need: payload
        secretkey
        signing option
  jwt.sign(): The key , payload and expiry duration sent with in the jwt.sign as options. This will create a token for the user and store a local copy of the token till time expiration 
  jwt.verify(): 

Passport: the passport validates the jwt and gets the user information for the session. so that only when logged in the user can access the protected routes.
  jwt_strategy: use the jwt strategy for passport to validate the user based on the bearer token.
  fromAuthHeaderAsBearerToken(): will make the header to get the bearer token as jwt token.
  authenticate(): in the endpoint creation, this will ensure the protected route using jwt strategy. 

Bcryptjs: 
  becrypt.gensalt(): used to hash the password using the salt. also can compare the hash with the password given by the user.

validator: validates the input based on validator library
  validateRegisterInput(), validateLoginrInput(): will take the data from the body of the registration page and login page respectively as paramenter and check for errors. returns the error as string.
  there are predefined functions like isEmail, isEmpty and length in the validation library. Using these to validate the user inputs.

Creating express API for 
  GET: user, profile details using protected route
  POST: user registration, user login, profile update, experience update, education update, update like
    update like: logic: when user hits the post(/likes/:id), the user id will be put into the likes array of the post. We can know who all liked the post. In futue if someone likes the post we will check if the user id has already in the likes array, if so then the like foe the user will not work again.
  DELETE: user, profile, experience, education (using id in the url as parameter).
    To delete post or a comment, first find using the id and then splice the array then save the rest of the array and then display the json document




********************REACT*********************************************************************************
In the package.json, add proxy to make the react to point the same port as that of nodejs
Use concurrently, to use multiple commands execute at once. just run npm run server inside the node then it will run both react and node.

AXIOS : used to communicate the frontend with the backend
created the register and login forms in react added the constructor to take the values in form and change the state using a function
  onChange(): this will uset setState({[e.target.name]:e.target.value}). 
  onSubmit(): will have actuons of the form 

redux: state manager. cannot mutate the state but copy it and then modify it.
Send todos to components using redux. Share the state data amnong components using redux.
When ajax request is made the redux will call the action.

connect: used to connect redux to a component so import the connect in the component
reducer will dispatch the data when ever the action is needed and get the states in the component.

To get any auth state into the component use mapStateToProps(state) takes state as parameter and put state to prpperty so that itcan be used anywhere in the component.

In react, any property in a component must be mapped to proptypes.

when user logged in if the user hit login in url the dashboard should be displayed. For this, in ligin.js and register.js check if user user logged in using isAuthenticated is true or not in the componentDidMount() function and then this.props.history.push('/dashboard)