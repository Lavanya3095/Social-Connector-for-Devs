Promise: The promise that an particular action takes place.

BodyParser : to get the data from the req.body and parse them to use it further

Mongoosechemas: created mongoose schema for users and profile using new Schema({this portion has the key and type for every field u need in mongodb document})

JWT: json web token, token thet user passes during logging in to ensure the secured access to the database.
  need: payload
        secretkey
        signing option
  jwt.sign(): The key , payload and expiry duration sent with in the jwt.sign as options. This will create a token for the user and store a local copy of the token till time expiration 
  jwt.verify(): 

Passport: the passport validates the jwt and gets the user information for the session. so that only when logged in the user can access the protected routes.
  jwt_strategy: use the jwt strategy for passport to validate the user based on the bearer token.
  fromAuthHeaderAsBearerToken(): will make the header to get the bearer token as jwt token.
  authenticate(): in the endpoint creation, this will ensure the protected route using jwt strategy. 

Bcryptjs: 
  becrypt.gensalt(): used to hash the password using the salt. also can compare the hash with the password given by the user.

validator: validates the input based on validator library
  validateRegisterInput(), validateLoginrInput(): will take the data from the body of the registration page and login page respectively as paramenter and check for errors. returns the error as string.
  there are predefined functions like isEmail, isEmpty and length in the validation library. Using these to validate the user inputs.

Creating express API for 
  GET: user, profile details using protected route
  POST: user registration, user login, profile update, experience update, education update, update like
    update like: logic: when user hits the post(/likes/:id), the user id will be put into the likes array of the post. We can know who all liked the post. In futue if someone likes the post we will check if the user id has already in the likes array, if so then the like foe the user will not work again.
  DELETE: user, profile, experience, education (using id in the url as parameter).
    To delete post or a comment, first find using the id and then splice the array then save the rest of the array and then display the json document




********************REACT*********************************************************************************
In the package.json, add proxy to make the react to point the same port as that of nodejs
Use concurrently, to use multiple commands execute at once. just run npm run server inside the node then it will run both react and nod.
